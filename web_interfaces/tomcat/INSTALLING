This has only been used by me under
 - Tomcat 5
 - Jetty jetty-9.4.11-2.v20180605.fc28.noarch.

It was only written as a self teaching exercise to teach myself a little java,
or in this case Java Servlet Pages (jsp) which was a simpler way of achieving
the same goal, USE AT YOUR OWN RISK.

Well OK written because I wanted to play with shared session pooling with a constant
server connection simply because I thought the perl-cgi interface that has to
reconnect to the servers at each poll interval would become to cpu/io heavy
with multiple users.
And by using 'real' scheduler userids the 'real' user roles can be used to
manage jobs/calendars/users etc. across all servers which cannot be permitted
by a cgi interface as thats tracked as the apache user with no accountabilty.


The steps to implement this are simply
  (1) customise one configuration file
  (2) copy it into a directory names scheduler in your J2EE webserver webapps directory.

(1) update your server list
    edit the file object_classes/object_SCHEDPoolWrapper.jsp
    you want to update the section in the file below to adjust
    the number of hosts you monitor, the hostnames and portnumbers
    each host has the scheduler running on.
      // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      // Change the below for your site
      // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      int countOfHosts = 3;
      String arrayOfHosts[] = { "falcon", "amber", "nic" };
      int arrayOfPorts[] =    { 9002, 9002, 9002 };
      int socketsPerHost = 5;
      // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      // Change the above for your site
      // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    The socketsPerHost value is the number of permanent connections the
    JSP interface will keep open to each server at al times; tune
    carefully (should be about 5-10% of users expected to use the 
    interface [unless they are all autorefreshing of couse] but probably
    never below 2).
    A socket is logged in for each user doing real work, but will log
    them out if they are inactive for too long so it is available for
    another user.
    Also during high load 'session stealing' can manage the load,
    basically if all sessions are logged on and N+1 users makes a
    request the oldest used session is automatically logged off and
    the N+1 user is logged into the session instead.
    So the trick is to only bump the socketsPerHost is session stealing
    occurs too often. The tomcat catalina.out log will have application
    written messages when session stealing is occuring so can be
    monitored that way.

(2) Just copy the entire directory to your J2EE server 'webapps' directory.
    Tomcat: normally /usr/local/tomcat/webapps or /opt/tomcat/webapps
    Jetty:  normally /var/lib/jetty/webapps
    (a quick 'find / -type d -name webapps' will find it).
    Then....
       mkdir /whereveryoufoundit/webapps/scheduler
       cp -rp * /whereveryoufoundit/webapps/scheduler
    adjust selinux contexts with chcon if needed

    Then...
      Tomcat: restart tomcat
      Jetty:  no action needed, it automatically is detected

    Then...
      Point web browser at http://servername:8080/scheduler/
      login with your JOB SCHEDULER USERID (which should be setup on all
      the servers you are using with the same useris and password) at 

(3) Done. 
    You can now add jobs/calendars to all managed servers at once, add
    users to all servers at once, manage active jobs across all servers 
    from one place (similar to the perl-cgi interface but using your
    userid instead of the 'apache' is needed by the perl-cgi interface).
    
