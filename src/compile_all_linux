#!/bin/bash
#
# Syntax: ./compile_all_linux /path/to/top/of/install/tree
#
# WARNING: Code has been modified for GCC 10.
#          May not compile under earlier versions anymore.
#
# ASSUMPTIONS: You already have a directory structure in place
#              for the job scheduler from a previous install.
#
#
MAXCC=0
## ------------------------------------------------------------------------
## Where are we putting the binaries
## ------------------------------------------------------------------------
## Set the target directory
targetdir=$1
if [ "${targetdir}." = "." ];
then
   # targetdir="/opt/dickinson/js_testing/bin"
   targetdir="/opt/dickinson/scheduler/bin"
fi
if [ ! -d ${targetdir} ];
then
   echo "*error* ${targetdir} does not exist"
   echo "The recompile expects an existing scheduler bin location (or a test directory)"
   exit 1
fi

## ------------------------------------------------------------------------
## build the system description header file we need
## ------------------------------------------------------------------------

## Ensure the system_type.h is set for LINUX
echo "#ifndef SYSTEM_TYPE" > system_type.h
echo "#define SYSTEM_TYPE" >> system_type.h

systype=`uname -s`
case "${systype}" in
   "Linux") echo "#define LINUX" >> system_type.h ;;
   "SunOS") echo "#define SOLARIS" >> system_type.h ;;
   *)       echo "#define LINUX" >> system_type.h ;;
esac

echo "#endif" >> system_type.h

## ------------------------------------------------------------------------
## Just make sure the MAXCC has the highest error code
## ------------------------------------------------------------------------
testcc() {
  lastcc=$1
  if [ ${lastcc} -gt ${MAXCC} ]
  then
     MAXCC=${lastcc}
  fi
} 

## ------------------------------------------------------------------------
## Build the main application.
## ------------------------------------------------------------------------
echo "Compiling server modules, wait..."
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wno-unused -Wstringop-truncation alerts.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation calendar.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation -Wno-unused config.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation -Wno-format-truncation jobslib.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wno-unused -Wstringop-truncation -Wno-format-truncation -Wno-restrict schedlib.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation utils.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wno-unused -Wstringop-truncation api.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wno-unused -Wstringop-truncation -Wno-format-truncation -Wno-restrict server.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation bulletproof.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation users.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation calendar_utils.c
testcc $?
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wstringop-truncation memorylib.c
testcc $?
gcc -ggdb3 alerts.o calendar.o config.o jobslib.o schedlib.o \
 utils.o api.o server.o bulletproof.o \
 users.o memorylib.o -o ${targetdir}/jobsched_daemon
testcc $?

echo "Compiling command line interface, wait..."
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type jobsched_cmd.c
testcc $?
gcc -ggdb3 calendar_utils.o bulletproof.o utils.o api.o memorylib.o jobsched_cmd.o -o ${targetdir}/jobsched_cmd
testcc $?

## ------------------------------------------------------------------------
## Build some utility tools
## ------------------------------------------------------------------------
echo "Building utility tools, wait..."
gcc -ggdb3 -c -D_GNU_SOURCE -Wall -Wreturn-type -Wno-format-truncation jobsched_take_snapshot.c
testcc $?
gcc -ggdb3 utils.o memorylib.o jobsched_take_snapshot.o -o ${targetdir}/jobsched_take_snapshot
testcc $?
gcc -ggdb3 -o ${targetdir}/explain_errno explain_errno.c
testcc $?
gcc -ggdb3 -o ${targetdir}/jobsched_security_checks jobsched_security_checks.c 
testcc $?
gcc -ggdb3 -o ${targetdir}/jobsched_jobutil jobsched_jobutil.c 
testcc $?

rm -rf *.o
echo "Done !, binaries placed into ${targetdir}"
exit ${MAXCC}
